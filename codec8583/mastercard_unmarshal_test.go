package codec8583_test

import (
	"errors"
	"fmt"
	"runtime"
	"strconv"
	"testing"

	"github.com/danil/equal4"
	"github.com/danil/iso8583/codec8583"
)

var MastercardUnmarshalerUnmarshalTestCases = []struct {
	encoded   []byte
	decoded   iso8583Msg
	line      int
	benchmark bool
}{
	{
		encoded:   []byte{0xf0, 0xf1, 0xf0, 0xf0, 0x76, 0x7f, 0x46, 0x1, 0xa8, 0xe1, 0xba, 0xa, 0xf1, 0xf6, 0xf5, 0xf3, 0xf2, 0xf1, 0xf3, 0xf0, 0xf0, 0xf3, 0xf6, 0xf7, 0xf8, 0xf5, 0xf6, 0xf2, 0xf3, 0xf9, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf3, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf5, 0xf1, 0xf3, 0xf1, 0xf0, 0xf1, 0xf4, 0xf0, 0xf9, 0xf4, 0xf6, 0xf0, 0xf4, 0xf7, 0xf1, 0xf7, 0xf0, 0xf9, 0xf8, 0xf1, 0xf0, 0xf2, 0xf3, 0xf2, 0xf9, 0xf0, 0xf5, 0xf1, 0xf2, 0xf4, 0xf6, 0xf0, 0xf4, 0xf1, 0xf0, 0xf1, 0xf4, 0xf2, 0xf3, 0xf1, 0xf0, 0xf1, 0xf0, 0xf1, 0xf4, 0xf1, 0xf0, 0xf1, 0xf3, 0xf7, 0xf9, 0xf9, 0xf1, 0xf0, 0xf5, 0xf1, 0xf0, 0xf0, 0xf0, 0xf0, 0xf6, 0xf0, 0xf0, 0xf2, 0xf1, 0xf1, 0xf9, 0xf0, 0xf6, 0xf2, 0xf0, 0xf0, 0xf1, 0xf7, 0xf6, 0xf3, 0xf7, 0xf5, 0xf3, 0xf2, 0xf1, 0xf3, 0xf0, 0xf0, 0xf3, 0xf6, 0xf7, 0xf8, 0xf5, 0xf6, 0xf2, 0xf3, 0xf9, 0x7e, 0xf2, 0xf3, 0xf1, 0xf0, 0xf2, 0xf0, 0xf1, 0xf1, 0xf1, 0xf2, 0xf6, 0xf5, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf5, 0xf4, 0xf1, 0xf9, 0xf2, 0xf8, 0xf7, 0xf1, 0xf2, 0xf2, 0xf3, 0xf2, 0xf9, 0xf0, 0xf5, 0xd7, 0xe2, 0xf6, 0xf5, 0xf7, 0xf5, 0xf7, 0xf0, 0xf0, 0xf3, 0xf4, 0xf5, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf2, 0xf8, 0xf2, 0xf2, 0xf4, 0xd2, 0xe4, 0xd3, 0xe3, 0xe4, 0xd9, 0x40, 0xc1, 0x4b, 0xe2, 0x4b, 0x40, 0xd4, 0xc9, 0xd5, 0xc9, 0xc1, 0xe3, 0xe4, 0xd9, 0x40, 0x40, 0x40, 0xc9, 0xe2, 0xe3, 0xc1, 0xd5, 0xc2, 0xe4, 0xd3, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xe3, 0xe4, 0xd9, 0xf0, 0xf1, 0xf6, 0xd9, 0xf6, 0xf1, 0xf0, 0xf5, 0xf0, 0xf0, 0xf0, 0xf0, 0xf1, 0xf8, 0xf0, 0xf0, 0xf2, 0xe3, 0xe5, 0xf9, 0xf4, 0xf9, 0xf8, 0xf4, 0xf0, 0x92, 0x4d, 0x46, 0x2d, 0xcd, 0xe6, 0x55, 0x99, 0xf9, 0xf7, 0xf0, 0xf1, 0xf1, 0xf0, 0xf0, 0xf0, 0xf0, 0xf1, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf1, 0xf4, 0xf5, 0x9f, 0x26, 0x8, 0xd9, 0x4, 0x8b, 0x76, 0xb4, 0xe4, 0x8a, 0x55, 0x9f, 0x27, 0x1, 0x80, 0x9f, 0x10, 0x12, 0x1, 0x10, 0xa0, 0x40, 0x3, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x9f, 0x37, 0x4, 0xfc, 0xad, 0x27, 0x1e, 0x9f, 0x36, 0x2, 0x0, 0x42, 0x95, 0x5, 0x0, 0x0, 0x4, 0x80, 0x0, 0x9a, 0x3, 0x19, 0x10, 0x14, 0x9c, 0x1, 0x0, 0x9f, 0x2, 0x6, 0x0, 0x0, 0x0, 0x0, 0x30, 0x0, 0x5f, 0x2a, 0x2, 0x9, 0x49, 0x82, 0x2, 0x39, 0x0, 0x9f, 0x1a, 0x2, 0x7, 0x92, 0x9f, 0x3, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9f, 0x33, 0x3, 0xe0, 0xf0, 0x48, 0x9f, 0x34, 0x3, 0x42, 0x3, 0x0, 0x9f, 0x35, 0x1, 0x22, 0x9f, 0x1e, 0x8, 0x32, 0x37, 0x37, 0x30, 0x32, 0x32, 0x36, 0x37, 0x9f, 0x53, 0x1, 0x52, 0x84, 0x7, 0xa0, 0x0, 0x0, 0x0, 0x4, 0x10, 0x10, 0x9f, 0x9, 0x2, 0x0, 0x2, 0x9f, 0x41, 0x2, 0x34, 0x40, 0xf0, 0xf2, 0xf1, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf5, 0xf0, 0xf0, 0xf7, 0xf9, 0xf2, 0xf3, 0xf4, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf9, 0xe3, 0xd5, 0xe6, 0xf4, 0xf5, 0xe8, 0xe5, 0xd3, 0xe5},
		decoded:   iso8583Msg{MessageTypeIndicator: "0100", PrimaryAccountNumber: "5321300367856239", ProcessingCode: "000000", AmountTransaction: "000000003000", AmountCardholderBilling: "000000000513", TransmissionDateTime: "1014094604", ConversionRateCardholderBilling: "71709810", SystemTraceAuditNumber: "232905", LocalTransactionTime: "124604", LocalTransactionDate: "1014", ExpirationDate: "2310", SettlementDate: "1014", CurrencyConversionDate: "1013", MerchantTypeOrMerchantCategoryCode: "7991", PointOfServiceEntryMode: "051", ApplicationPANSequenceNumber: "000", AcquiringInstitutionIdentificationCode: "002119", ForwardingInstitutionIdentificationCode: "200176", Track2Data: "5321300367856239=23102011126500000541", RetrievalReferenceNumber: "928712232905", CardAcceptorTerminalIdentification: "PS657570", CardAcceptorIdentificationCode: "034500000028224", CardAcceptorNameLocation: "KULTUR A.S. MINIATUR   ISTANBUL      TUR", AdditionalDataPrivate: "2fbx8PXw8PDw8fjw8PLj5Q==", CurrencyCodeTransaction: "949", CurrencyCodeCardholderBilling: "840", PersonalIdentificationNumberData: "kk1GLc3mVZk=", SecurityRelatedControlInformation: "9701100001000000", ICCData: "nyYI2QSLdrTkilWfJwGAnxASARCgQAMkAAAAAAAAAAAAAAD/nzcE/K0nHp82AgBClQUAAASAAJoDGRAUnAEAnwIGAAAAADAAXyoCCUmCAjkAnxoCB5KfAwYAAAAAAACfMwPg8EifNANCAwCfNQEinx4IMjc3MDIyNjefUwFShAegAAAABBAQnwkCAAKfQQI0QA==", ReservedPrivate1: "000000000050079234000", ReservedPrivate3: "TNW45YVLV"},
		line:      func() int { _, _, l, _ := runtime.Caller(1); return l }(),
		benchmark: true,
	},
}

func TestMastercardUnmarshalerUnmarshal(t *testing.T) {
	_, testFile, _, _ := runtime.Caller(0)
	for _, tc := range MastercardUnmarshalerUnmarshalTestCases {
		tc := tc
		t.Run(strconv.Itoa(tc.line), func(t *testing.T) {
			t.Parallel()
			linkToExample := fmt.Sprintf("%s:%d", testFile, tc.line)
			dec := iso8583Msg{}
			err := codec8583.MastercardUnmarshaler.Unmarshal(tc.encoded, &dec)
			if err != nil {
				t.Fatalf("unexpected error: %#v - %s", err, linkToExample)
			}
			if dec != tc.decoded {
				t.Errorf("[decoded message] expected: %#v, received: %#v - %s", tc.decoded, dec, linkToExample)
			}
		})
	}
}

func TestMastercardUnmarshalerUnmarshalSmallMessage(t *testing.T) {
	v := iso8583Msg{}
	expectedError := errors.New("ISO 8583 unmarshal: message too small to read: 6 < 12, message: []byte{0x46, 0x6f, 0x6f, 0x62, 0x61, 0x72}")
	err := codec8583.MastercardUnmarshaler.Unmarshal([]byte("Foobar"), &v)
	if !equal4.ErrorEqual(err, expectedError) {
		t.Errorf("[error] expected: %#v, received: %#v", expectedError, err)
	}
}

func TestMastercardUnmarshalerUnmarshalWithoutMTI(t *testing.T) {
	type withoutMTI struct {
		PrimaryAccountNumber string `iso8538:"2"`
	}
	v := withoutMTI{}
	expectedError := errors.New("ISO 8583 unmarshal: decode MTI: struct must have MTI field, message: []byte{0xf0, 0xf1, 0xf0, 0xf0, 0x76, 0x7f, 0x46, 0x1, 0xa8, 0xe1, 0xa2, 0xa, 0xf1, 0xf6, 0xf5, 0xf3, 0xf2, 0xf1, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xf6, 0xf3, 0xf3, 0xf4, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf2, 0xf0, 0xf1, 0xf2, 0xf6, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf3, 0xf1, 0xf0, 0xf1, 0xf0, 0xf0, 0xf8, 0xf0, 0xf5, 0xf3, 0xf1, 0xf3, 0xf7, 0xf7, 0xf0, 0xf1, 0xf5, 0xf4, 0xf2, 0xf5, 0xf9, 0xf1, 0xf9, 0xf6, 0xf8, 0xf4, 0xf2, 0xf0, 0xf8, 0xf3, 0xf1, 0xf3, 0xf7, 0xf1, 0xf0, 0xf0, 0xf8, 0xf2, 0xf3, 0xf1, 0xf2, 0xf1, 0xf0, 0xf0, 0xf8, 0xf1, 0xf0, 0xf0, 0xf8, 0xf5, 0xf4, 0xf1, 0xf1, 0xf0, 0xf7, 0xf1, 0xf0, 0xf0, 0xf1, 0xf0, 0xf6, 0xf0, 0xf0, 0xf5, 0xf0, 0xf3, 0xf7, 0xf0, 0xf6, 0xf2, 0xf0, 0xf0, 0xf1, 0xf5, 0xf4, 0xf3, 0xf7, 0xf5, 0xf3, 0xf2, 0xf1, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xf6, 0xf3, 0xf3, 0xf4, 0xc4, 0xf2, 0xf3, 0xf1, 0xf2, 0xf2, 0xf0, 0xf1, 0xf1, 0xf9, 0xf6, 0xf9, 0xf1, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf3, 0xf7, 0xf7, 0xf5, 0xf1, 0xf9, 0xf9, 0xf3, 0xf9, 0xf7, 0xf2, 0xf7, 0xf0, 0xf2, 0xf3, 0xf1, 0xf0, 0xf7, 0xf4, 0xf7, 0xf0, 0xf0, 0xf7, 0xf9, 0xf9, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf2, 0xf6, 0xf6, 0xf2, 0xf2, 0x40, 0x40, 0x40, 0xd7, 0xe8, 0xc1, 0xe3, 0xc5, 0xd9, 0xd6, 0xc3, 0xc8, 0xd2, 0xc1, 0x40, 0xf7, 0xf9, 0xf0, 0xf4, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xd7, 0x96, 0x84, 0x96, 0x93, 0xa2, 0x92, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xd9, 0xe4, 0xe2, 0xf0, 0xf1, 0xf6, 0xd9, 0xf2, 0xf3, 0xf0, 0xf2, 0xf0, 0xf0, 0xf6, 0xf1, 0xf0, 0xf5, 0xf0, 0xf0, 0xf0, 0xf0, 0xf1, 0xf6, 0xf4, 0xf3, 0xf8, 0xf4, 0xf0, 0xf1, 0xf1, 0xf6, 0x5f, 0x2a, 0x2, 0x6, 0x43, 0x82, 0x2, 0x19, 0x80, 0x84, 0x7, 0xa0, 0x0, 0x0, 0x0, 0x4, 0x10, 0x10, 0x95, 0x5, 0x0, 0x0, 0x0, 0x80, 0x0, 0x9a, 0x3, 0x19, 0x10, 0x8, 0x9c, 0x1, 0x0, 0x9f, 0x2, 0x6, 0x0, 0x0, 0x0, 0x2, 0x1, 0x26, 0x9f, 0x3, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9f, 0x10, 0x12, 0x1, 0x10, 0xa0, 0x40, 0x3, 0x22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x9f, 0x1a, 0x2, 0x6, 0x43, 0x9f, 0x26, 0x8, 0x2, 0x5f, 0x1a, 0x91, 0x8b, 0x20, 0xdc, 0x91, 0x9f, 0x27, 0x1, 0x80, 0x9f, 0x33, 0x3, 0xe0, 0x8, 0xc8, 0x9f, 0x34, 0x3, 0x1f, 0x3, 0x0, 0x9f, 0x36, 0x2, 0x1, 0x60, 0x9f, 0x37, 0x4, 0xcf, 0x25, 0x9a, 0x1f, 0xf0, 0xf2, 0xf2, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf1, 0xf0, 0xf0, 0xf0, 0xf0, 0xf3, 0xf0, 0xf0, 0xf6, 0xf4, 0xf3, 0xf1, 0xf4, 0xf2, 0xf1, 0xf0, 0xf3, 0xf0, 0xf0, 0xf9, 0xe3, 0xd5, 0xe6, 0xc7, 0xc1, 0xd7, 0xf4, 0xf0, 0xf5}")
	err := codec8583.MastercardUnmarshaler.Unmarshal(iso8583Bytes[0], &v)
	if !equal4.ErrorEqual(err, expectedError) {
		t.Errorf("[error] expected: %#v, received: %#v", expectedError, err)
	}
}

func TestMastercardUnmarshalerUnmarshalWithoutPAN(t *testing.T) {
	type withoutPan struct {
		MTI string `iso8538:"MTI"`
	}
	v := withoutPan{}
	expectedError := errors.New(`ISO 8583 unmarshal: decode field: 2, struct does not have a field with tag: 2, the message in field: 2, has a value: "5321XXXXXXXX6334", all fields: [2 3 4 6 7 10 11 12 13 14 15 16 18 22 23 32 33 35 37 41 42 43 48 49 51 55 61 63], message: []byte{0xf0, 0xf1, 0xf0, 0xf0, 0x76, 0x7f, 0x46, 0x1, 0xa8, 0xe1, 0xa2, 0xa, 0xf1, 0xf6, 0xf5, 0xf3, 0xf2, 0xf1, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xf6, 0xf3, 0xf3, 0xf4, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf2, 0xf0, 0xf1, 0xf2, 0xf6, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf3, 0xf1, 0xf0, 0xf1, 0xf0, 0xf0, 0xf8, 0xf0, 0xf5, 0xf3, 0xf1, 0xf3, 0xf7, 0xf7, 0xf0, 0xf1, 0xf5, 0xf4, 0xf2, 0xf5, 0xf9, 0xf1, 0xf9, 0xf6, 0xf8, 0xf4, 0xf2, 0xf0, 0xf8, 0xf3, 0xf1, 0xf3, 0xf7, 0xf1, 0xf0, 0xf0, 0xf8, 0xf2, 0xf3, 0xf1, 0xf2, 0xf1, 0xf0, 0xf0, 0xf8, 0xf1, 0xf0, 0xf0, 0xf8, 0xf5, 0xf4, 0xf1, 0xf1, 0xf0, 0xf7, 0xf1, 0xf0, 0xf0, 0xf1, 0xf0, 0xf6, 0xf0, 0xf0, 0xf5, 0xf0, 0xf3, 0xf7, 0xf0, 0xf6, 0xf2, 0xf0, 0xf0, 0xf1, 0xf5, 0xf4, 0xf3, 0xf7, 0xf5, 0xf3, 0xf2, 0xf1, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xf6, 0xf3, 0xf3, 0xf4, 0xc4, 0xf2, 0xf3, 0xf1, 0xf2, 0xf2, 0xf0, 0xf1, 0xf1, 0xf9, 0xf6, 0xf9, 0xf1, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf3, 0xf7, 0xf7, 0xf5, 0xf1, 0xf9, 0xf9, 0xf3, 0xf9, 0xf7, 0xf2, 0xf7, 0xf0, 0xf2, 0xf3, 0xf1, 0xf0, 0xf7, 0xf4, 0xf7, 0xf0, 0xf0, 0xf7, 0xf9, 0xf9, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf2, 0xf6, 0xf6, 0xf2, 0xf2, 0x40, 0x40, 0x40, 0xd7, 0xe8, 0xc1, 0xe3, 0xc5, 0xd9, 0xd6, 0xc3, 0xc8, 0xd2, 0xc1, 0x40, 0xf7, 0xf9, 0xf0, 0xf4, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xd7, 0x96, 0x84, 0x96, 0x93, 0xa2, 0x92, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xd9, 0xe4, 0xe2, 0xf0, 0xf1, 0xf6, 0xd9, 0xf2, 0xf3, 0xf0, 0xf2, 0xf0, 0xf0, 0xf6, 0xf1, 0xf0, 0xf5, 0xf0, 0xf0, 0xf0, 0xf0, 0xf1, 0xf6, 0xf4, 0xf3, 0xf8, 0xf4, 0xf0, 0xf1, 0xf1, 0xf6, 0x5f, 0x2a, 0x2, 0x6, 0x43, 0x82, 0x2, 0x19, 0x80, 0x84, 0x7, 0xa0, 0x0, 0x0, 0x0, 0x4, 0x10, 0x10, 0x95, 0x5, 0x0, 0x0, 0x0, 0x80, 0x0, 0x9a, 0x3, 0x19, 0x10, 0x8, 0x9c, 0x1, 0x0, 0x9f, 0x2, 0x6, 0x0, 0x0, 0x0, 0x2, 0x1, 0x26, 0x9f, 0x3, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9f, 0x10, 0x12, 0x1, 0x10, 0xa0, 0x40, 0x3, 0x22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x9f, 0x1a, 0x2, 0x6, 0x43, 0x9f, 0x26, 0x8, 0x2, 0x5f, 0x1a, 0x91, 0x8b, 0x20, 0xdc, 0x91, 0x9f, 0x27, 0x1, 0x80, 0x9f, 0x33, 0x3, 0xe0, 0x8, 0xc8, 0x9f, 0x34, 0x3, 0x1f, 0x3, 0x0, 0x9f, 0x36, 0x2, 0x1, 0x60, 0x9f, 0x37, 0x4, 0xcf, 0x25, 0x9a, 0x1f, 0xf0, 0xf2, 0xf2, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf1, 0xf0, 0xf0, 0xf0, 0xf0, 0xf3, 0xf0, 0xf0, 0xf6, 0xf4, 0xf3, 0xf1, 0xf4, 0xf2, 0xf1, 0xf0, 0xf3, 0xf0, 0xf0, 0xf9, 0xe3, 0xd5, 0xe6, 0xc7, 0xc1, 0xd7, 0xf4, 0xf0, 0xf5}`)
	err := codec8583.MastercardUnmarshaler.Unmarshal(iso8583Bytes[0], &v)
	if !equal4.ErrorEqual(err, expectedError) {
		t.Errorf("[error] expected: %#v, received: %#v", expectedError, err)
	}
}
